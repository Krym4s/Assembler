
#define DO_P_PUSH(x) pushIntoStack (processor->stackBuff, x)

#define DO_P_POP() popFromStack (processor->stackBuff)
#define NO_PARAMS 0

#define WRITE_JMP_POINTER    {                                          \
                             int* iValue =(int*) (IsE_Bytecode + i);   printf ("%d\n",i); \
                             i += sizeof(int);                          \
                             char strValue[20] = {};                    \
                             sprintf (strValue, "%d", *iValue);         \
                             strcat (*assemblerCode, strValue);         \
                             }

#define READ_JMP_POINTER    {                                                                                   \
                                int labelAdress = -1;                                                           \
                                if (sscanf((assemblerCode + i)->chLine + commandLen, " %d", &labelAdress))      \
                                {                                                                               \
                                    char* chVers = (char*) &labelAdress;                                        \
                                    for (int j = 0; j < sizeof (labelAdress); ++j)                              \
                                            *(*IsE_ByteCode + codeByte++) = *(chVers + j);                      \
                                }                                                                               \
                                else                                                                            \
                                {                                                                               \
                                    sscanf((assemblerCode + i)->chLine + commandLen, " : %d", &labelAdress);    \
                                    labelAdress = labels[labelAdress];                                          \
                                    char* chVers = (char*) &labelAdress;                                        \
                                                                                                                \
                                    for (int j = 0; j < sizeof (labelAdress); ++j)                              \
                                         *(*IsE_ByteCode + codeByte++) = *(chVers + j);                         \
                                }                                                                               \
                            }

#define JMP_CONDITION(sign) {                                                                \
                                double temp = DO_P_POP();                                    \
                                if (DO_P_POP() sign temp)                                    \
                                {                                                            \
                                    int* chVers = (int*) (processor->code + processor->rip); \
                                    processor->rip = *chVers;               \
                                }                                           \
                                else                                        \
                                {\
                                    processor->rip+=sizeof(int);\
                                }\
                            }

DEF_CPU (ADD, 1, NO_PARAMS, { DO_P_PUSH (DO_P_POP() + DO_P_POP());},;,;)

DEF_CPU (SUB, 17, NO_PARAMS,
{
    double temp = DO_P_POP();
    DO_P_PUSH (DO_P_POP() - temp);
},;,;)

DEF_CPU (MUL, 2, NO_PARAMS, { DO_P_PUSH (DO_P_POP() * DO_P_POP());},;,;)

DEF_CPU (DIV, 18, NO_PARAMS,
{
    double temp = DO_P_POP();
    DO_P_PUSH (DO_P_POP() / temp);
},;,;)

DEF_CPU (IN, 3, NO_PARAMS,
{
    double value;
    scanf ("%lg", &value);
    DO_P_PUSH (value);
},;,;)

DEF_CPU (OUT, 19, NO_PARAMS, {printf ("%lg\n", DO_P_POP());},;,;)

DEF_CPU (SIN, 115, NO_PARAMS, {DO_P_PUSH ( sin(DO_P_POP()) );},;,;)

DEF_CPU (COS, 99, NO_PARAMS, {DO_P_PUSH ( cos(DO_P_POP()) );},;,;)

DEF_CPU (POW, 112, NO_PARAMS,
{
    double temp = DO_P_POP();
    DO_P_PUSH(pow (DO_P_POP(), temp));
},;,;)

DEF_CPU (SQRT, 113, NO_PARAMS, {DO_P_PUSH ( sqrt (DO_P_POP()) );},;,;)

DEF_CPU (DUMP, 100, NO_PARAMS, {processorDump (processor, ARGNAME(processor->errorCode), __LINE__ );},;,;)

#define DEF_REG(name,value) case value: DO_P_PUSH (processor->name); \
                                        break;

DEF_CPU (PUSH, 4, 1,
{
    if (!processor->code[processor->rip++])
    {
        double* chVers = (double*) (processor->code + processor->rip);
        DO_P_PUSH (*chVers);
        processor->rip += 8;
    }

    else
    {
        int regval = processor->code[processor->rip++];
        switch (regval)
        {
            DEF_REG (rax, 0)

            DEF_REG (rbx, 1)

            DEF_REG (rcx, 2)

            DEF_REG (rdx, 3)
            default:
                printf ("No such register\n");
        }
    }
},

{
    double dValue = 0;

    if (sscanf ((assemblerCode + i)->chLine + commandLen, " %lg", &dValue) == 1)
    {
        *(*IsE_ByteCode + codeByte++) = 0;
        char* charDTranslit =(char*) &dValue;

        for (int j = 0; j < sizeof (double); ++j)
            *(*IsE_ByteCode + codeByte++) = *(charDTranslit + j);
    }
    else
    {
        sscanf ((assemblerCode + i)->chLine + commandLen, " %s", command);
        int regN = findReg (command);
        *(*IsE_ByteCode + codeByte++) = 1;
        *(*IsE_ByteCode + codeByte++) = regN;
    }
},

{
    char mode = IsE_Bytecode[i++];
    if (mode == 1)
    {
        char reg = IsE_Bytecode[i++];
        findReg (assemblerCode, reg);
    }
    else
    {
        double* dValue =(double*) (IsE_Bytecode + i);
        i += 8;
        char strValue[20] = {};
        sprintf (strValue, "%lg", *dValue);
        strcat (*assemblerCode, strValue);
    }
})

#undef DEF_REG
#define DEF_REG(name,value) case value: processor->name = DO_P_POP(); \
                                break;

DEF_CPU (POP, 20, 1,
{
    if (!processor->code[processor->rip++])
        DO_P_POP ();

    else
    {
        int regval = processor->code[processor->rip++];
        switch (regval)
        {
        DEF_REG (rax, 0)

        DEF_REG (rbx, 1)

        DEF_REG (rcx, 2)

        DEF_REG (rdx, 3)
        default:
            printf ("No such register\n");
        }
    }
},

{
    sscanf ((assemblerCode + i)->chLine + commandLen, " %s", command);
    int regN = findReg (command);
    if (regN == 255)
    {
         *(*IsE_ByteCode + codeByte++) = 0;
    }
    else
    {
         *(*IsE_ByteCode + codeByte++) = 1;
         *(*IsE_ByteCode + codeByte++) = regN;
    }
},

{
    char mode = IsE_Bytecode[i++];
        if (mode == 1)
        {
            char reg = IsE_Bytecode[i++];
            findReg (assemblerCode, reg);
        }
})
#undef DEF_REG

DEF_CPU (NEG, 126, NO_PARAMS, {DO_P_PUSH (- DO_P_POP());},;,;)

DEF_CPU (COMPL_ERROR, 127, NO_PARAMS, {printf ("COMPILATION ERROR");},;,;)

DEF_CPU (HLT, 0, NO_PARAMS, {return 0;},;,;)

DEF_CPU (JMP, 21, 1,
{
    int* chVers = (int*) (processor->code + processor->rip);
    processor->rip = *chVers;
}, READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (JA, 22, 1, JMP_CONDITION(>), READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (JAE, 23, 1, JMP_CONDITION(>=), READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (JB, 24, 1, JMP_CONDITION(<), READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (JBE, 25, 1, JMP_CONDITION(<=), READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (JE, 26, 1,
{
    double temp = DO_P_POP();
    if ( fabs (DO_P_POP() - temp) < EPSILON)
    {
        int* chVers = (int*) (processor->code + processor->rip);
        processor->rip = *chVers;
    }
    else
    {
        processor->rip+=sizeof(int);
    }
}, READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (JNE, 27, 1,
{
    JMP_CONDITION(!=)
}, READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (CALL, 28, 1,
{
    int* chVers = (int*) (processor->code + processor->rip);
    pushIntoStack (processor->stackFunc, processor->rip + sizeof (*chVers));
    processor->rip = *chVers;
}, READ_JMP_POINTER, WRITE_JMP_POINTER)

DEF_CPU (RET, 29, 0, processor->rip = popFromStack (processor->stackFunc);,;,;)

#undef JMP_CONDITION
#undef READ_JMP_POINTER
#undef WRITE_JMP_POINTER
#undef NO_PARAMS
#undef DO_P_PUSH
#undef DO_P_POP